var shell = require('electron').shell;

var pinboardObjectToDelete;
const tm = texmath.use(katex);
var md = window.markdownit({
    html: true,
    linkify: true,
    typographer: true,
    highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
            try {
                return '<pre class="hljs"><code>' +
                    hljs.highlight(lang, str, true).value +
                    '</code></pre>';
            } catch (__) { }
        }

        return '<pre class="hljs cbOverwrite"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
    }
}).use(window.markdownitEmoji)
  .use(window.markdownitSup)
  .use(window.markdownitSub)
  .use(window.markdownitTaskLists, {enabled: true})
  .use(tm);
md.renderer.rules.emoji = function(token, idx) {
    return twemoji.parse(token[idx].content);
};

// Open links externally by default
// Without this, links generated by markdown-it will be opened inside the electron app, making corona unaccessible
$(document).on('click', 'a[href^="http"]', function(event) {
    event.preventDefault();
    shell.openExternal(this.href);
});

// Tabstop handling in textboxes
$(document).on('keydown', ".pinboardObject-text", function (e) {
    var keyCode = e.keyCode || e.which;

    if (keyCode == 9) {
        e.preventDefault();
        var start = this.selectionStart;
        var end = this.selectionEnd;

        // set textarea value to: text before caret + tab + text after caret
        $(this).val($(this).val().substring(0, start)
            + "\t"
            + $(this).val().substring(end));

        // put caret at right position again
        this.selectionStart =
        this.selectionEnd = start + 1;
        // update the markdown
        var result = md.render($(this).val());
        $(this).parent().parent().find(".pinboardObject-markdown").html(result);
    }
});


// Drag & Drop
function allowDrop(ev) {
    ev.preventDefault();
}

function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev) {
    ev.preventDefault();
    var type = ev.dataTransfer.getData("text");
    switch (type) {
        case "toolboxObject-text":
            var data = {
                id: uuidv4()
            };
            var template = $("#pinboardObject-text-template").html();
            var html = Mustache.render(template, data);
            $("#pinboard").append(html);
            var addedObject = $( "p:contains(" +  data.id + ")").closest(".pinboardObject");
            addedObject.css({
                left: ev.pageX - (addedObject.width() / 2),
                top: ev.pageY - addedObject.height()
            });
            localizeElement(addedObject,currentLang);
        
            var handle = $("<div class='resize-handle'></div>").appendTo(addedObject);
            TweenLite.set(handle, { top: "150px", left: "200px" });

            Draggable.create(addedObject, {
                bounds: pinboard,
                autoScroll: 2,
                edgeResistance: 1,
                type: "top,left"
            });

            Draggable.create(handle, {
                type:"top,left",
                bounds:{minX:200,minY:150,maxX:Number.MAX_VALUE,maxY:Number.MAX_VALUE},
                onPress: function(e) {
                    e.stopPropagation(); // cancel drag
                },
                onDrag: function(e) {
                    TweenLite.set(this.target.parentNode, { width: this.x, height: this.y });
                }
            });

            toggleEdit(addedObject);
            break;
        case "toolboxObject-image":
            var data = {
                id: uuidv4()
            }
            var template = $("#pinboardObject-image-template").html();
            var html = Mustache.render(template, data);
            $("#pinboard").append(html);
            var addedObject = $( "p:contains(" +  data.id + ")").closest(".pinboardObject");
            setImage(addedObject);
            addedObject.css({
                left: ev.pageX - (addedObject.width() / 2),
                top: ev.pageY - addedObject.height()
            })
            localizeElement(addedObject,currentLang);
        
            var handle = $("<div class='resize-handle'></div>").appendTo(addedObject);
            TweenLite.set(handle, { top: "150px", left: "200px" });

            Draggable.create(addedObject, {
                bounds: pinboard,
                autoScroll: 2,
                edgeResistance: 1,
                type: "top,left"
            });

            Draggable.create(handle, {
                type:"top,left",
                bounds:{minX:200,minY:150,maxX:Number.MAX_VALUE,maxY:Number.MAX_VALUE},
                onPress: function(e) {
                    e.stopPropagation(); // cancel drag
                },
                onDrag: function(e) {
                    TweenLite.set(this.target.parentNode, { width: this.x, height: this.y });
                }
            });
            break;
        case "toolboxObject-map":
            if (maps.length == 16) {
                iziToast.error({
                    id: 'error',
                    title: '',
                    message: 'Maximum number of maps reached',
                    position: 'bottomRight',
                    transitionIn: 'fadeInDown'
                });
                return;
            }
            var data = {
                id: uuidv4()
            }
            var template = $("#pinboardObject-map-template").html();
            var html = Mustache.render(template, data);
            $("#pinboard").append(html);
            var addedObject = $( "p:contains(" +  data.id + ")").closest(".pinboardObject");
            addedObject.css({
                left: ev.pageX - (addedObject.width() / 2),
                top: ev.pageY - addedObject.height()
            })

            addMap(addedObject);

            localizeElement(addedObject,currentLang);
        
            var handle = $("<div class='resize-handle'></div>").appendTo(addedObject);
            TweenLite.set(handle, { top: "150px", left: "201px" });

            var dragInstance = Draggable.create(addedObject, {
                bounds: pinboard,
                autoScroll: 2,
                edgeResistance: 1,
                type: "top,left"
            });
            dragInstance[0].addEventListener("dragstart", disableMapDrag);
            dragInstance[0].addEventListener("dragend", enableMapDrag);



            Draggable.create(handle, {
                type:"top,left",
                bounds:{minX:201,minY:150,maxX:Number.MAX_VALUE,maxY:Number.MAX_VALUE},
                onPress: function(e) {
                    e.stopPropagation(); // cancel drag
                },
                onDrag: function(e) {
                    TweenLite.set(this.target.parentNode, { width: this.x, height: this.y });
                    resizeMap();
                }
            });
            break;
        case "toolboxObject-fl":
            var data = {
                id: uuidv4()
            }
            var template = $("#pinboardObject-fl-template").html();
            var html = Mustache.render(template, data);
            $("#pinboard").append(html);
            var addedObject = $( "p:contains(" +  data.id + ")").closest(".pinboardObject");
            setFile(addedObject);
            addedObject.css({
                left: ev.pageX - (addedObject.width() / 2),
                top: ev.pageY - addedObject.height()
            })
            localizeElement(addedObject,currentLang);
        
            var handle = $("<div class='resize-handle'></div>").appendTo(addedObject);
            TweenLite.set(handle, { top: "150px", left: "261px" });

            Draggable.create(addedObject, {
                bounds: pinboard,
                autoScroll: 2,
                edgeResistance: 1,
                type: "top,left"
            });

            Draggable.create(handle, {
                type:"top,left",
                bounds:{minX:261,minY:150,maxX:Number.MAX_VALUE,maxY:Number.MAX_VALUE},
                onPress: function(e) {
                    e.stopPropagation(); // cancel drag
                },
                onDrag: function(e) {
                    TweenLite.set(this.target.parentNode, { width: this.x, height: this.y });
                    var tableObj = $(this.target).closest(".pbFl").find(".flTable-name");
                    var obj = $(this.target).closest(".pbFl").find(".pinboardObject-fl-name");
                    var tableWidth = tableObj.width();
                    TweenLite.set(obj, { width: this.x - 162}); //Why -162? I don't know. But with this value, the scaling works fine, so f*ck it
                }
            });
            break;
    }
}

// Set the image of an image object
function setImage(addedObject) {
    dialog.showOpenDialog({filters: [{name: 'Images', extensions: ['jpg', 'png']}]}, function (FileName) {
        if (FileName !== undefined) {
            addedObject.find(".pinboardObject-image").css("background-image",'url("' + fileUrl(FileName[0]) + '")');
        }
    });
}
// Set the file of a FileLink
function setFile(addedObject) {
    dialog.showOpenDialog({filters: [{name: 'All Files', extensions: ['*']}],buttonLabel: "Select"}, function (FileName) {
        if (FileName !== undefined) {
            addedObject.find("#filepath").text(FileName[0]);
            addedObject.find(".pinboardObject-fl-name").text(path.basename(FileName[0]));
            var ext = path.extname(FileName[0]);
            setFLImage(ext, addedObject);
        }
    });
}
// Set the thumbnail of the file
// This is an absolute catastrophe and, just like localization, will have to be transferred to an external file
function setFLImage(ext, obj) {
    var imgCt = obj.find(".pinboardObject-fl-icon")
    switch (ext) {
        case ".jpg":
        case ".png":
        case ".bmp":
        case ".gif":
        case ".svg":
        case ".psd":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/image.svg") + '")');
            break;
        case ".txt":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/text.svg") + '")');
            break;
        case ".doc":
        case ".docx":
        case ".rtf":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/word.svg") + '")');
            break;
        case ".mp3":
        case ".ogg":
        case ".wav":
        case ".pcm":
        case ".aiff":
        case ".aac":
        case ".wma":
        case ".flac":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/audio.svg") + '")');
            break;
        case ".exe":
        case ".dll":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/exe.svg") + '")');
            break;
        case ".zip":
        case ".7z":
        case ".rar":
        case ".gz":
            imgCt.css("background-image", 'url("' + fileUrl("img/fileicons/archive.svg") + '")');
            break;
    }
}

// Fixes File paths output by a Node.js function for the usage in CSS url("") parameters
function fileUrl(str) {
    if (typeof str !== 'string') {
        throw new Error('Expected a string');
    }

    var pathName = path.resolve(str).replace(/\\/g, '/');

    // Windows drive letter must be prefixed with a slash
    if (pathName[0] !== '/') {
        pathName = '/' + pathName;
    }

    return encodeURI('file://' + pathName);
};

// UI events
var imageBackgroundTypes = ['cover','contain','100% 100%'];
var imagebackgroundState = 0;
$(document).on('click', ".pinboardObject-image", function(ev){
    if (ev.ctrlKey) {
        var state = $(this).css('background-size')
        switch (state) {
            case 'cover':
            $(this).css('background-size','contain')
                break;
            case 'contain':
            $(this).css('background-size','100% 100%')
                break;
            case '100% 100%':
            $(this).css('background-size','cover')
                break;
        }   
    }
});

$(document).on('click', "#fileLinkOpen", function(ev) {
    var filepath = $(this).parent().parent().parent().parent().parent().parent().find("#filepath").text();
    log(filepath,"d");
    filepath = path.normalize(filepath);
    log(filepath,"d");
    shell.showItemInFolder(filepath);
});

$(document).on('click', "#deletePinboardObject", function(ev){
    pinboardObjectToDelete = $(this).parent().parent().parent();
    deleteMode = "pinboardObject";								// Der deleteMode gibt der Dialogsbestätigungsfunktion an, welcher Löschvorgang ausgeführt werden soll
	$(".alertOverlay").css("display","block");				    // Das Bestätigungsoverlay und der darin liegende Ja-Nein-Dialog werden sichtbar gemacht
});

$(document).on('click', "#editPinboardObject", function(ev){
    var object = $(this).parent().parent().parent();
    var type = object.attr("pbType");
    switch (type) {
        case "text":
            toggleEdit(object);
            break;
        case "image":
            setImage(object);
            break;
   }
});

// Prevents Draggable conflicting with map pan
$(document).on({
    mouseenter: function () {
        if (mapDraggable) {
            Draggable.get($(this).parent().parent()).disable();
        }
    },
    mouseleave: function () {
        Draggable.get($(this).parent().parent()).enable();
    }
}, ".pinboardObject-map");

// Edit mode switching
function toggleEdit(obj) {
    if ($(obj).find("#editPinboardObject").attr("loc") == "?savePinboardObject") {
        closeThis(obj);
        return;
    }
    var fin = $(obj).find("#mdFinished");
    var txt = $(obj).find(".pinboardObject-text");
    $(obj).find("#editPinboardObject").attr("loc", '?savePinboardObject');

    $(obj).find(".pinboardObject-mdPreview").css("display", "block");
    fin.css("display", "none");
    txt.css("display", "block");
    txt.focus();

    closeOthers(obj);

    localizeElement(obj, currentLang);
}

function closeOthers(currObj) {
    var allObj = $(".pinboardObject");
    var currId = currObj.find("#uuidpbobj").text();
    $.each(allObj, function(index, element) {
        var elemId = $(element).find("#uuidpbobj").text();
        if (elemId !== currId) {
            var fin = $(element).find("#mdFinished");
            var txt = $(element).find(".pinboardObject-text");

            $(element).find("#editPinboardObject").attr("loc",'?editPinboardObject');

            $(element).find(".pinboardObject-mdPreview").css("display","none");
            var result = $(element).find(".pinboardObject-markdown").html();
            var mdHe = $(element).find(".pinboardObject-mdPreview").height();
            fin.html(result);
            fin.parent().parent().css("height",mdHe - 26 + "px");    
            TweenLite.set($(element).find(".resize-handle"), { top: mdHe -26 + "px"});
            fin.css("display","block");
            txt.css("display", "none");

            localizeElement(element,currentLang);
        }
    });
}

function closeThis(obj) {
    var fin = $(obj).find("#mdFinished");
    var txt = $(obj).find(".pinboardObject-text");

    $(obj).find("#editPinboardObject").attr("loc",'?editPinboardObject');

    $(obj).find(".pinboardObject-mdPreview").css("display","none");
    var result = $(obj).find(".pinboardObject-markdown").html();
    var mdHe = $(obj).find(".pinboardObject-mdPreview").height();
    fin.html(result);
    fin.parent().parent().css("height",mdHe - 26 + "px");    
    TweenLite.set($(obj).find(".resize-handle"), { top: mdHe - 26 + "px"});
    fin.css("display","block");
    txt.css("display", "none");

    localizeElement(obj,currentLang);
}

// Markdown processing
$(document).on("input", ".pinboardObject-text", function() {
    var result = md.render($(this).val());
    $(this).parent().parent().find(".pinboardObject-markdown").html(result);
});